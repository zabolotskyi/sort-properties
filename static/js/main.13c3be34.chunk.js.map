{"version":3,"sources":["features/properties/PropertiesSort.module.css","features/properties/propertiesSlice.ts","features/properties/PropertiesSort.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","propertiesSlice","createSlice","name","initialState","value","properties","label","orderType","visibleProperties","visiblePropertiesNames","sortedProperties","reducers","addNewProperty","state","addVisibleProperty","action","map","el","payload","changeVisibleProperty","optionValue","filter","toggleOrderType","deleteProperty","sortProperties","id","property","order","priority","actions","selectProperties","propertiesSort","selectVisibleProperties","selectVisiblePropertiesNames","selectSortedProperties","PropertiesSort","useSelector","dispatch","useDispatch","onToggleOrderType","option","className","styles","heading","key","select","onChange","options","includes","hideSelectedOptions","onClick","disabled","Boolean","delete","buttons","button","length","some","table","table_header","table_property","table_item","App","store","configureStore","reducer","propertiesSortReducer","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.13c3be34.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"PropertiesSort_heading__OIKYg\",\"buttons\":\"PropertiesSort_buttons__1GP2l\",\"button\":\"PropertiesSort_button__3mEJe\",\"option\":\"PropertiesSort_option__2EWlj\",\"select\":\"PropertiesSort_select__2Ukh1\",\"order\":\"PropertiesSort_order__2YFul\",\"delete\":\"PropertiesSort_delete__2pwgl\",\"table\":\"PropertiesSort_table__1qw-v\",\"table_item\":\"PropertiesSort_table_item__3-WBk\",\"table_header\":\"PropertiesSort_table_header__31OfM\",\"table_property\":\"PropertiesSort_table_property__t1zde\"};","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport { RootState } from '../../app/store';\r\n\r\nexport interface IProperty {\r\n  value: string;\r\n  label: string;\r\n  orderType: string;\r\n  priority?: number;\r\n}\r\n\r\ninterface ISortedProperty {\r\n  property: string;\r\n  order: string;\r\n  priority: number;\r\n}\r\n\r\ninterface PropertiesState {\r\n  value: number;\r\n  properties: IProperty[];\r\n  visibleProperties: IProperty[];\r\n  visiblePropertiesNames: string[];\r\n  sortedProperties: ISortedProperty[];\r\n}\r\n\r\nconst initialState: PropertiesState = {\r\n  value: 0,\r\n  properties: [{\r\n    value: 'affiliate',\r\n    label: 'Affiliate',\r\n    orderType: 'ASC'\r\n  }, {\r\n    value: 'balance',\r\n    label: 'Balance',\r\n    orderType: 'DESC'\r\n  }, {\r\n    value: 'bonus_balance',\r\n    label: 'Bonus balance',\r\n    orderType: 'DESC'\r\n  }, {\r\n    value: 'campaign',\r\n    label: 'Campaign',\r\n    orderType: 'ASC'\r\n  }, {\r\n    value: 'cash_balance',\r\n    label: 'Cash balance',\r\n    orderType: 'DESC'\r\n  }, {\r\n    value: 'country',\r\n    label: 'Country',\r\n    orderType: 'ASC'\r\n  }, {\r\n    value: 'trader_points',\r\n    label: 'Trader points',\r\n    orderType: 'DESC'\r\n  }],\r\n  visibleProperties: [],\r\n  visiblePropertiesNames: [],\r\n  sortedProperties: []\r\n};\r\n\r\nexport const propertiesSlice = createSlice({\r\n  name: 'propertiesSort',\r\n  initialState,\r\n  reducers: {\r\n    addNewProperty: state => {\r\n      const visibleProperties = [...state.visibleProperties, {\r\n        value: '',\r\n        label: '',\r\n        orderType: ''\r\n      }];\r\n\r\n      state.visibleProperties = visibleProperties;\r\n    },\r\n    addVisibleProperty: (state, action: PayloadAction<IProperty>) => {\r\n      const visibleProperties = state.visibleProperties.map(el => el.value ? el : action.payload);\r\n      const visiblePropertiesNames = [...state.visiblePropertiesNames, action.payload.value];\r\n\r\n      state.visibleProperties = visibleProperties;\r\n      state.visiblePropertiesNames = visiblePropertiesNames;\r\n    },\r\n    changeVisibleProperty: (state, action: PayloadAction<{optionValue: string; value: IProperty}>) => {\r\n      const { optionValue, value: { value, label, orderType } }= action.payload;\r\n\r\n      const visibleProperties = state.visibleProperties.map(el => {\r\n        return el.value !== optionValue ? el : { value, label, orderType }\r\n      });\r\n\r\n      const visiblePropertiesNames = [...state.visiblePropertiesNames.filter(el => el !== optionValue), value];\r\n\r\n      state.visibleProperties = visibleProperties;\r\n      state.visiblePropertiesNames = visiblePropertiesNames;\r\n    },\r\n    toggleOrderType: (state, action: PayloadAction<IProperty>) => {\r\n      const visibleProperties = state.visibleProperties.map(el => {\r\n        if (el.value === action.payload.value) {\r\n          el.orderType = el.orderType === 'ASC' ? 'DESC' : 'ASC';\r\n        }\r\n        return el;\r\n      });\r\n\r\n      state.visibleProperties = visibleProperties;\r\n    },\r\n    deleteProperty: (state, action: PayloadAction<string>) => {\r\n      const visibleProperties =state.visibleProperties.filter(el => el.value !== action.payload);\r\n      const visiblePropertiesNames = [...state.visiblePropertiesNames.filter(el => el !== action.payload)];\r\n\r\n      state.visibleProperties = visibleProperties;\r\n      state.visiblePropertiesNames = visiblePropertiesNames;\r\n    },\r\n    sortProperties: state => {\r\n      const sortedProperties = state.visibleProperties.map((el, id) => ({\r\n        property: el.label,\r\n        order: el.orderType,\r\n        priority: id + 1\r\n      }));\r\n\r\n      state.sortedProperties = sortedProperties;\r\n    }\r\n  }\r\n});\r\n\r\nexport const {\r\n  addNewProperty,\r\n  addVisibleProperty, \r\n  changeVisibleProperty,\r\n  deleteProperty,\r\n  sortProperties,\r\n  toggleOrderType\r\n} = propertiesSlice.actions;\r\n\r\nexport const selectProperties = (state: RootState) => state.propertiesSort.properties;\r\nexport const selectVisibleProperties = (state: RootState) => state.propertiesSort.visibleProperties;\r\nexport const selectVisiblePropertiesNames = (state: RootState) => state.propertiesSort.visiblePropertiesNames;\r\nexport const selectSortedProperties = (state: RootState) => state.propertiesSort.sortedProperties\r\n\r\nexport default propertiesSlice.reducer;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Select from 'react-select';\r\n\r\nimport {\r\n  addNewProperty,\r\n  addVisibleProperty,\r\n  changeVisibleProperty,\r\n  deleteProperty,\r\n  IProperty,\r\n  selectProperties,\r\n  selectSortedProperties,\r\n  selectVisibleProperties,\r\n  selectVisiblePropertiesNames,\r\n  sortProperties,\r\n  toggleOrderType\r\n} from './propertiesSlice';\r\n\r\nimport styles from './PropertiesSort.module.css';\r\n\r\nexport function PropertiesSort() {\r\n  const properties = useSelector(selectProperties);\r\n  const visibleProperties = useSelector(selectVisibleProperties);\r\n  const visiblePropertiesNames = useSelector(selectVisiblePropertiesNames);\r\n  const sortedProperties = useSelector(selectSortedProperties);\r\n  const dispatch = useDispatch();\r\n\r\n  const onAddNewProperty = () => {\r\n    dispatch(addNewProperty());\r\n  };\r\n\r\n  const onSelectProperty = (optionValue: string) => (value: IProperty) => {\r\n    if (optionValue === '') {\r\n      dispatch(addVisibleProperty(value));\r\n    } else {\r\n      dispatch(changeVisibleProperty({ optionValue, value }));\r\n    }\r\n  };\r\n\r\n  const onToggleOrderType = (option: IProperty) => () => {\r\n    dispatch(toggleOrderType(option));\r\n  };\r\n\r\n  const onDeleteProperty = (value: string) => () => {\r\n    dispatch(deleteProperty(value));\r\n  };\r\n\r\n  const onSortProperties = () => {\r\n    dispatch(sortProperties());\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h1 className={styles.heading}>Properties</h1>\r\n        <div>\r\n          {(visibleProperties.map((option: IProperty, id: number) => (\r\n            <div key={id} className={styles.option}>\r\n              <div>{id + 1}</div>\r\n              <Select\r\n                className={styles.select}\r\n                value={visibleProperties[id]}\r\n                onChange={onSelectProperty(option.value) as any}\r\n                options={properties.filter((el: IProperty) => !visiblePropertiesNames.includes(el.value))}\r\n                hideSelectedOptions={true}\r\n              />\r\n              <div className={styles.order}>\r\n                {option.orderType}\r\n              </div>\r\n              <div>\r\n                <button\r\n                  onClick={onToggleOrderType(option)}\r\n                  disabled={!Boolean(option.value)}\r\n                >\r\n                  Toggle order\r\n                </button>\r\n              </div>\r\n              <div className={styles.delete}>\r\n                <button\r\n                  onClick={onDeleteProperty(option.value)}\r\n                >\r\n                  Delete\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )))}\r\n        </div>\r\n        <div className={styles.buttons}>\r\n          <button\r\n            className={styles.button}\r\n            onClick={onAddNewProperty}\r\n            disabled={\r\n              visibleProperties.length === properties.length ||\r\n              visibleProperties.some(el => el.value === '')\r\n            }\r\n          >\r\n            Add property\r\n          </button>\r\n          <button\r\n            className={styles.button}\r\n            onClick={onSortProperties}\r\n            disabled={\r\n              visibleProperties.length === 0 ||\r\n              visibleProperties.some(el => el.value === '')\r\n            }\r\n          >\r\n            Sort\r\n          </button>\r\n        </div>\r\n      </div>\r\n      {Boolean(sortedProperties.length) && (\r\n        <div className={styles.table}>\r\n          <h2 className={styles.heading}>Sorted properties</h2>\r\n          <div className={styles.table_header}>\r\n            <div className={styles.table_property}>\r\n              <div>#</div>\r\n              <div>Property</div>\r\n            </div>\r\n            <div>Order</div>\r\n          </div>\r\n          {sortedProperties.map(el => (\r\n            <div className={styles.table_item}>\r\n              <div>{el.priority} {el.property}</div>\r\n              <div>{el.order}</div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { PropertiesSort } from './features/properties/PropertiesSort';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <PropertiesSort />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\n\r\nimport propertiesSortReducer from '../features/properties/propertiesSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    propertiesSort: propertiesSortReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}